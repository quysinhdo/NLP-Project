import streamlit as st
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from utils.helpers import display_title_icon, process_uploaded_file
import matplotlib.pyplot as plt

display_title_icon("üè∑Ô∏è", "Ph√¢n Lo·∫°i VƒÉn B·∫£n")

class TextClassifier:
    def __init__(self):
        self.vectorizer = TfidfVectorizer(max_features=5000)
        self.models = {
            "Naive Bayes": MultinomialNB(),
            "Logistic Regression": LogisticRegression(max_iter=1000),
            "SVM": SVC(kernel='linear'),
            "K-Nearest Neighbors": KNeighborsClassifier(),
            "Decision Tree": DecisionTreeClassifier()
        }
        self.classes = None

    def preprocess_data(self, texts, labels=None):
        """Ti·ªÅn x·ª≠ l√Ω v√† vector h√≥a d·ªØ li·ªáu"""
        if labels is None:
            return self.vectorizer.transform(texts)
        X = self.vectorizer.fit_transform(texts)
        self.classes = np.unique(labels)
        return X, labels

    def train_and_evaluate(self, X_train, X_test, y_train, y_test):
        """Hu·∫•n luy·ªán v√† ƒë√°nh gi√° c√°c m√¥ h√¨nh"""
        results = {}
        for name, model in self.models.items():
            if name in st.session_state.selected_models:
                model.fit(X_train, y_train)
                y_pred = model.predict(X_test)
                results[name] = accuracy_score(y_test, y_pred)
        return results

def detect_columns(df):
    """T·ª± ƒë·ªông ph√°t hi·ªán c·ªôt vƒÉn b·∫£n v√† nh√£n"""
    for col in df.columns:
        sample = str(df[col].iloc[0]) if len(df) > 0 else ""
        if len(sample.split()) > 3:
            text_col = col
            label_col = [c for c in df.columns if c != text_col][0]
            return text_col, label_col
    return None, None

def load_data():
    """Giao di·ªán t·∫£i d·ªØ li·ªáu"""
    st.subheader("Nh·∫≠p d·ªØ li·ªáu hu·∫•n luy·ªán")
    
    input_type = st.radio("Ch·ªçn c√°ch nh·∫≠p d·ªØ li·ªáu:", 
                         ["Nh·∫≠p tay", "T·∫£i file"], 
                         horizontal=True)
    
    if input_type == "Nh·∫≠p tay":
        text_input = st.text_area("Nh·∫≠p vƒÉn b·∫£n (m·ªói d√≤ng m·ªôt m·∫´u):", height=150)
        label_input = st.text_area("Nh·∫≠p nh√£n t∆∞∆°ng ·ª©ng (m·ªói d√≤ng m·ªôt nh√£n):", height=150)
        
        if text_input and label_input:
            texts = [line.strip() for line in text_input.split('\n') if line.strip()]
            labels = [line.strip() for line in label_input.split('\n') if line.strip()]
            return texts, labels
    else:
        uploaded_file = st.file_uploader("T·∫£i file (.csv, .txt, .docx, .pdf, .json)", type=["csv", "txt", "docx", "pdf", "json"])
        if uploaded_file:
            file_extension = uploaded_file.name.split('.')[-1].lower()
            if file_extension == 'csv':
                df = pd.read_csv(uploaded_file)
                text_col, label_col = detect_columns(df)
                if text_col and label_col:
                    st.info(f"ƒê√£ nh·∫≠n di·ªán: VƒÉn b·∫£n - '{text_col}', Nh√£n - '{label_col}'")
                    return df[text_col].astype(str).tolist(), df[label_col].astype(str).tolist()
                st.error("Kh√¥ng th·ªÉ t·ª± ƒë·ªông x√°c ƒë·ªãnh c·ªôt vƒÉn b·∫£n v√† nh√£n")
            else:
                texts = process_uploaded_file(uploaded_file)
                if texts:
                    st.warning("File kh√¥ng ph·∫£i CSV. Nh√£n c·∫ßn ƒë∆∞·ª£c nh·∫≠p ri√™ng.")
                    label_input = st.text_area("Nh·∫≠p nh√£n (m·ªói d√≤ng m·ªôt nh√£n, t∆∞∆°ng ·ª©ng v·ªõi vƒÉn b·∫£n):", height=150)
                    if label_input:
                        labels = [line.strip() for line in label_input.split('\n') if line.strip()]
                        if len(labels) == len(texts):
                            return texts, labels
                        st.error("S·ªë l∆∞·ª£ng nh√£n kh√¥ng kh·ªõp v·ªõi s·ªë l∆∞·ª£ng vƒÉn b·∫£n")
    return None, None

def plot_algorithm_comparison(results, selected_models):
    """V·∫Ω bi·ªÉu ƒë·ªì c·ªôt so s√°nh accuracy c·ªßa c√°c thu·∫≠t to√°n"""
    algorithms = selected_models
    accuracies = [results[algo] for algo in algorithms]
    
    plt.figure(figsize=(10, 6))
    bars = plt.bar(algorithms, accuracies, color='#1f77b4')
    
    # Th√™m gi√° tr·ªã tr√™n ƒë·∫ßu m·ªói c·ªôt
    for bar in bars:
        yval = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.2%}', 
                ha='center', va='bottom', fontsize=10)
    
    plt.title('So s√°nh Accuracy c·ªßa c√°c Thu·∫≠t to√°n Ph√¢n lo·∫°i', fontsize=14, pad=20)
    plt.xlabel('Thu·∫≠t to√°n', fontsize=12)
    plt.ylabel('Accuracy', fontsize=12)
    plt.ylim(0, 1)
    plt.grid(True, axis='y', linestyle='--', alpha=0.7)
    
    # L∆∞u bi·ªÉu ƒë·ªì v√†o file t·∫°m th·ªùi
    plt.tight_layout()
    plt.savefig('algorithm_comparison.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return 'algorithm_comparison.png'

def main():
    st.markdown("""
    ## C√¥ng c·ª• Ph√¢n Lo·∫°i VƒÉn B·∫£n
    
    Nh·∫≠p d·ªØ li·ªáu hu·∫•n luy·ªán v√† ch·ªçn thu·∫≠t to√°n ƒë·ªÉ ph√¢n lo·∫°i
    """)
    
    # T·∫£i d·ªØ li·ªáu
    texts, labels = load_data()
    if not texts or not labels:
        return

    # Ch·ªçn thu·∫≠t to√°n
    selected_models = st.multiselect(
        "Ch·ªçn thu·∫≠t to√°n ph√¢n lo·∫°i:",
        ["Naive Bayes", "Logistic Regression", "SVM", "K-Nearest Neighbors", "Decision Tree"],
        default=["Naive Bayes"]
    )
    
    if not selected_models:
        st.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt thu·∫≠t to√°n")
        return

    # Chia d·ªØ li·ªáu
    test_size = st.slider("T·ªâ l·ªá d·ªØ li·ªáu ki·ªÉm tra:", 0.1, 0.5, 0.2, 0.05)

    if st.button("üèãÔ∏è Train"):
        classifier = TextClassifier()
        X, y = classifier.preprocess_data(texts, labels)
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42)
        
        # L∆∞u selected_models v√†o session state tr∆∞·ªõc khi hu·∫•n luy·ªán
        st.session_state.selected_models = selected_models
        
        results = classifier.train_and_evaluate(X_train, X_test, y_train, y_test)
        
        # L∆∞u classifier v√†o session state
        st.session_state.classifier = classifier
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        st.subheader("K·∫øt qu·∫£ ƒë√°nh gi√°")
        results_df = pd.DataFrame({
            "Thu·∫≠t to√°n": selected_models,
            "Accuracy": [results[name] for name in selected_models]
        })
        st.dataframe(results_df.style.format({"Accuracy": "{:.2%}"}))

        # V·∫Ω v√† hi·ªÉn th·ªã bi·ªÉu ƒë·ªì so s√°nh
        st.subheader("So s√°nh Accuracy c√°c thu·∫≠t to√°n")
        chart_path = plot_algorithm_comparison(results, selected_models)
        st.image(chart_path, caption="Bi·ªÉu ƒë·ªì so s√°nh Accuracy", use_container_width=True)

    if 'classifier' in st.session_state:
        st.subheader("Th·ª≠ nghi·ªám v·ªõi vƒÉn b·∫£n m·ªõi")
        new_text = st.text_input("Nh·∫≠p vƒÉn b·∫£n c·∫ßn ph√¢n lo·∫°i:")
        
        if new_text and st.button("üîÆ D·ª± ƒëo√°n"):
            try:
                classifier = st.session_state.classifier
                selected_models = st.session_state.selected_models
                
                # In ra th√¥ng tin ƒë·∫ßu v√†o
                st.write("VƒÉn b·∫£n ƒë·∫ßu v√†o:", new_text)
                
                # Ti·ªÅn x·ª≠ l√Ω
                X_new = classifier.preprocess_data([new_text])
                st.write("D·ªØ li·ªáu sau ti·ªÅn x·ª≠ l√Ω:", X_new.shape)
                
                # D·ª± ƒëo√°n
                predictions = {}
                for name in selected_models:
                    model = classifier.models[name]
                    predictions[name] = model.predict(X_new)[0]                
                
                st.success("K·∫øt qu·∫£ d·ª± ƒëo√°n:")
                st.write(pd.DataFrame.from_dict(predictions, orient='index', columns=['Nh√£n d·ª± ƒëo√°n']))
                
            except Exception as e:
                st.error(f"L·ªói khi d·ª± ƒëo√°n: {str(e)}")

if __name__ == "__main__":
    main()